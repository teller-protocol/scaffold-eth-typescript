# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Pull Request CI

on:
  pull_request:

env:
  GH_NPM_TOKEN: ${{ secrets.GH_NPM_TOKEN }}

jobs:
  test-contracts:
    runs-on: ubuntu-latest
    steps:
      - uses: teller-protocol/scaffold-pr-setup@main
        with:
          GH_NPM_TOKEN: ${{ secrets.GH_NPM_TOKEN }}

      - name: Create mnemonic secret
        run: echo ${{ secrets.MNEMONIC }} >> ./packages/hardhat-ts/mnemonic.secret

      - name: Test Contracts
        env:
            DEFAULT_NETWORK: ${{ secrets.DEFAULT_NETWORK }}
            MAINNET_RPC_URL: ${{ secrets.MAINNET_RPC_URL }}
            KOVAN_RPC_URL: ${{ secrets.KOVAN_RPC_URL }}
            GOERLI_RPC_URL: ${{ secrets.GOERLI_RPC_URL }}
            RINKEBY_RPC_URL: ${{ secrets.RINKEBY_RPC_URL }}
            ROPSTEN_RPC_URL: ${{ secrets.ROPSTEN_RPC_URL }}
            POLYGON_RPC_URL: ${{ secrets.POLYGON_RPC_URL }}
            MUMBAI_RPC_URL: ${{ secrets.MUMBAI_RPC_URL }}
            ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
            CMC_KEY: ${{ secrets.CMC_KEY }}
            DISABLE_LOGS: ${{ secrets.DISABLE_LOGS }}
        run: yarn test

  app-tsc:
    runs-on: ubuntu-latest
    steps:
      - uses: teller-protocol/scaffold-pr-setup@main
        with:
          GH_NPM_TOKEN: ${{ secrets.GH_NPM_TOKEN }}

      - name: Compile Contracts
        env:
          DEFAULT_NETWORK: ${{ secrets.DEFAULT_NETWORK }}
        run: yarn contracts build

      - name: Export Contracts
        run: yarn export

      - name: Compile App Typescript
        run: yarn app tsc

  deploy-netlify-preview:
    runs-on: ubuntu-latest
    needs: [app-tsc]
    steps:
      - uses: teller-protocol/scaffold-pr-setup@main
        with:
          GH_NPM_TOKEN: ${{ secrets.GH_NPM_TOKEN }}

      - name: Compile Contracts
        env:
          DEFAULT_NETWORK: ${{ secrets.DEFAULT_NETWORK }}
        run: yarn contracts build

      - name: Export Contracts
        run: yarn export

      - name: Deploy to Netlify
        uses: jsmrcaga/action-netlify-deploy@v1.7.2
        with:
          build_directory: ./packages/vite-app-ts/dist
          NETLIFY_DEPLOY_MESSAGE: "Deploy from GitHub Actions - PR #${{ github.event.pull_request.number }}"
          deploy_alias: dp-${{ github.event.pull_request.number }}
          functions_directory: ./packages/vite-app-ts/functions
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          install_command: yarn install
          build_command: yarn compile && yarn export && yarn build
          node_version: v16.13.1

      - name: Netlify Status Success Check # You would run your tests before this using the output to set state/desc
        if: success()
        uses: Sibz/github-status-action@v1
        with:
          authToken: ${{secrets.GITHUB_TOKEN}}
          context: 'Deploy preview on Netlify'
          description: 'Passed'
          state: 'success'
          sha: ${{github.event.pull_request.head.sha}}
          target_url:  https://dp-${{ github.event.pull_request.number }}--${{ secrets.NETLIFY_SITE_NAME }}.netlify.app
      
      - name: Netlify Status Failure Check # You would run your tests before this using the output to set state/desc
        if: failure()
        uses: Sibz/github-status-action@v1
        with:
          authToken: ${{secrets.GITHUB_TOKEN}}
          context: 'Deploy preview on Netlify'
          description: 'Failed'
          state: 'failure'
          sha: ${{github.event.pull_request.head.sha}}
